package net.minecraft.structure;

import com.google.common.collect.Lists;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import net.minecraft.nbt.NbtCompound;
import net.minecraft.nbt.NbtList;
import net.minecraft.nbt.NbtOps;
import net.minecraft.server.world.ServerWorld;
import net.minecraft.util.math.BlockBox;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.ChunkPos;
import net.minecraft.util.registry.DynamicRegistryManager;
import net.minecraft.util.registry.Registry;
import net.minecraft.world.HeightLimitView;
import net.minecraft.world.StructureWorldAccess;
import net.minecraft.world.biome.Biome;
import net.minecraft.world.gen.ChunkRandom;
import net.minecraft.world.gen.StructureAccessor;
import net.minecraft.world.gen.chunk.ChunkGenerator;
import net.minecraft.world.gen.feature.FeatureConfig;
import net.minecraft.world.gen.feature.MineshaftFeatureConfig;
import net.minecraft.world.gen.feature.StructureFeature;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * A structure start is created to describe a structure that will be generated by
 * chunk generation. It contains a definition of its pieces and is associated
 * with the chunk that the structure originates from.
 */
public abstract class StructureStart<C extends FeatureConfig> {
	private static final Logger field_29328 = LogManager.getLogger();
	public static final StructureStart<?> DEFAULT = new StructureStart<MineshaftFeatureConfig>(
		StructureFeature.MINESHAFT, new ChunkPos(0, 0), BlockBox.empty(), 0, 0L
	) {
		public void init(
			DynamicRegistryManager dynamicRegistryManager,
			ChunkGenerator chunkGenerator,
			StructureManager structureManager,
			ChunkPos chunkPos,
			Biome biome,
			MineshaftFeatureConfig mineshaftFeatureConfig,
			HeightLimitView heightLimitView
		) {
		}
	};
	private final StructureFeature<C> feature;
	protected final List<StructurePiece> children = Lists.<StructurePiece>newArrayList();
	protected BlockBox boundingBox;
	private final ChunkPos pos;
	/**
	 * The number of chunks that intersect the structures bounding box,
	 * and have stored references to its starting chunk.
	 * <p>
	 * This number can be lower than the number of <em>potential</em>
	 * intersecting chunks, since it is only updated when an actual reference
	 * is created in such chunks (when they enter the corresponding chunk generation
	 * phase).
	 */
	private int references;
	protected final ChunkRandom random;

	public StructureStart(StructureFeature<C> feature, ChunkPos pos, BlockBox box, int references, long worldSeed) {
		this.feature = feature;
		this.pos = pos;
		this.references = references;
		this.random = new ChunkRandom();
		this.random.setCarverSeed(worldSeed, pos.x, pos.z);
		this.boundingBox = box;
	}

	public abstract void init(
		DynamicRegistryManager registryManager, ChunkGenerator chunkGenerator, StructureManager manager, ChunkPos pos, Biome biome, C config, HeightLimitView world
	);

	public BlockBox getBoundingBox() {
		return this.boundingBox;
	}

	public List<StructurePiece> getChildren() {
		return this.children;
	}

	public void generateStructure(
		StructureWorldAccess world, StructureAccessor structureAccessor, ChunkGenerator chunkGenerator, Random random, BlockBox box, ChunkPos chunkPos
	) {
		synchronized (this.children) {
			if (!this.children.isEmpty()) {
				BlockBox blockBox = ((StructurePiece)this.children.get(0)).boundingBox;
				BlockPos blockPos = blockBox.getCenter();
				BlockPos blockPos2 = new BlockPos(blockPos.getX(), blockBox.minY, blockPos.getZ());
				Iterator<StructurePiece> iterator = this.children.iterator();

				while (iterator.hasNext()) {
					StructurePiece structurePiece = (StructurePiece)iterator.next();
					if (structurePiece.getBoundingBox().intersects(box)
						&& !structurePiece.generate(world, structureAccessor, chunkGenerator, random, box, chunkPos, blockPos2)) {
						iterator.remove();
					}
				}

				this.setBoundingBoxFromChildren();
			}
		}
	}

	protected void setBoundingBoxFromChildren() {
		this.boundingBox = BlockBox.empty();

		for (StructurePiece structurePiece : this.children) {
			this.boundingBox.encompass(structurePiece.getBoundingBox());
		}
	}

	public NbtCompound toNbt(ServerWorld world, ChunkPos chunkPos) {
		NbtCompound nbtCompound = new NbtCompound();
		if (this.hasChildren()) {
			nbtCompound.putString("id", Registry.STRUCTURE_FEATURE.getId(this.getFeature()).toString());
			nbtCompound.putInt("ChunkX", chunkPos.x);
			nbtCompound.putInt("ChunkZ", chunkPos.z);
			nbtCompound.putInt("references", this.references);
			BlockBox.CODEC.encodeStart(NbtOps.INSTANCE, this.boundingBox).resultOrPartial(field_29328::error).ifPresent(nbtElement -> nbtCompound.put("BB", nbtElement));
			NbtList nbtList = new NbtList();
			synchronized (this.children) {
				for (StructurePiece structurePiece : this.children) {
					nbtList.add(structurePiece.toNbt(world));
				}
			}

			nbtCompound.put("Children", nbtList);
			return nbtCompound;
		} else {
			nbtCompound.putString("id", "INVALID");
			return nbtCompound;
		}
	}

	protected void randomUpwardTranslation(int seaLevel, int i, Random random, int j) {
		int k = seaLevel - j;
		int l = this.boundingBox.getBlockCountY() + i + 1;
		if (l < k) {
			l += random.nextInt(k - l);
		}

		int m = l - this.boundingBox.maxY;
		this.boundingBox.move(0, m, 0);

		for (StructurePiece structurePiece : this.children) {
			structurePiece.translate(0, m, 0);
		}
	}

	protected void randomUpwardTranslation(Random random, int minY, int maxY) {
		int i = maxY - minY + 1 - this.boundingBox.getBlockCountY();
		int j;
		if (i > 1) {
			j = minY + random.nextInt(i);
		} else {
			j = minY;
		}

		int k = j - this.boundingBox.minY;
		this.boundingBox.move(0, k, 0);

		for (StructurePiece structurePiece : this.children) {
			structurePiece.translate(0, k, 0);
		}
	}

	public boolean hasChildren() {
		return !this.children.isEmpty();
	}

	public ChunkPos getPos() {
		return this.pos;
	}

	public BlockPos getBlockPos() {
		return new BlockPos(this.pos.getStartX(), 0, this.pos.getStartZ());
	}

	public boolean isInExistingChunk() {
		return this.references < this.getReferenceCountToBeInExistingChunk();
	}

	public void incrementReferences() {
		this.references++;
	}

	public int getReferences() {
		return this.references;
	}

	protected int getReferenceCountToBeInExistingChunk() {
		return 1;
	}

	public StructureFeature<?> getFeature() {
		return this.feature;
	}
}
